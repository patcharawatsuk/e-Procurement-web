pipeline {
    agent any
    parameters {
        string(name: 'TAG_VERSION', defaultValue: 'latest', description: 'default = latest')
        choice(
          name: 'ENV_SITE',
          choices: ['dev', 'sit', 'uat'],
          description: 'Deploy to Environment'
        )
    }

    environment {

        REPOSITORY = "ptvn-op-interface-web"
        REGISTRY_URL = "registry.pantavanij.com:8444"
        DOCKER_IMAGE = "${REGISTRY_URL}/ascendcorp/${REPOSITORY}"
        DOCKER_IMAGE_TAG = "${DOCKER_IMAGE}:${TAG_VERSION}"
        COMMIT_HASH = ""

        GIT_REMOTE_URL = "https://ptvndevops@bitbucket.org/ascendcorp/${REPOSITORY}.git"
        GIT_CREDENTIAL = "central_login_for_bitbucket"
        REGISTRY_CREDENTIAL = 'login_for_nexus_repository_docker'
        SSH_CREDENTIAL = 'jenkins-slave'

        //DEV
        APPLICATION_NAME_DEV = 'ptvn-op-interface-web'
        SERVER_DEPLOY_DEV = "centos@192.168.19.123"
        EXPOSE_PORT_DEV = "3000"

        //SIT
        APPLICATION_NAME_SIT = 'ptvn-op-interface-web'
        SERVER_DEPLOY_SIT = "centos@192.168.19.124"
        EXPOSE_PORT_SIT = "3000"

        //UAT
        APPLICATION_NAME_UAT= 'ptvn-op-interface-web'
        SERVER_DEPLOY_UAT = "centos@192.168.19.182"
        EXPOSE_PORT_UAT = "3000"
    }

    stages {
        stage("Clean jenkins workspace") {
            steps {
                cleanWs()
            }
        }

        stage('Poll SCM Tag') {
            when { expression { return TAG_VERSION != 'latest'} }
            steps {
                deleteDir()
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "refs/tags/${TAG_VERSION}"]],
                    userRemoteConfigs: [[url: "${GIT_REMOTE_URL}",
                    credentialsId: "${GIT_CREDENTIAL}"]]
                ])
                script {
                    COMMIT_HASH = sh( script: "git rev-list -n 1 ${TAG_VERSION}", returnStdout: true).trim()
                    echo "COMMIT_HASH=${COMMIT_HASH}"
                    echo "TAG_VERSION=${TAG_VERSION}"
                    echo "ENV_SITE=${ENV_SITE}"
                }
            }
        }

        stage('Poll SCM NotTag') {
            when { expression { return TAG_VERSION == 'latest'} }
            steps {
                deleteDir()
                checkout scm
                    script {
                        DOCKER_IMAGE_TAG = "${DOCKER_IMAGE}:${TAG_VERSION}"
                        COMMIT_HASH = sh( script: "git rev-parse HEAD", returnStdout: true).trim()
                        echo "COMMIT_HASH=${COMMIT_HASH}"
                        echo "TAG_VERSION=${TAG_VERSION}"
                        echo "ENV_SITE=${ENV_SITE}"
                    }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build --build-arg ENVIRONMENT=${ENV_SITE} -t ${DOCKER_IMAGE_TAG} -f Dockerfile ."
                    sh 'docker images'
                }
            }
        }

        stage('Push Docker Image') {
            steps{
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                        docker.withRegistry( "http://${REGISTRY_URL}", REGISTRY_CREDENTIAL ){
                            sh "docker push ${DOCKER_IMAGE_TAG}"
                            sh "docker rmi ${DOCKER_IMAGE_TAG}"
                            sh 'docker images'
                        }
                    }
                }
            }
        }

        stage('Deploy DEV') {
            agent any
            when {
                anyOf {
                    expression { ENV_SITE == 'dev' }
                }
            }
            steps {
                sshagent(credentials : [SSH_CREDENTIAL]) {
                    echo 'Setting credential'
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: REGISTRY_CREDENTIAL,
                        usernameVariable: 'USERNAME',
                        passwordVariable: 'PASSWORD'
                    ]]) {
                        // DEV #1
                        echo 'DEPLOY DEV#1'
                        sh '''#! /bin/bash
                            echo 'Login Docker'
                            ssh -o StrictHostKeyChecking=no $SERVER_DEPLOY_DEV sudo docker login -u $USERNAME -p $PASSWORD $REGISTRY_URL

                            echo 'Stop and Delete Docker'
                            ssh -o StrictHostKeyChecking=no $SERVER_DEPLOY_DEV sudo docker stop $APPLICATION_NAME_DEV
                            ssh -o StrictHostKeyChecking=no $SERVER_DEPLOY_DEV sudo docker container rm $APPLICATION_NAME_DEV

                            echo 'Pull Docker'
                            ssh -o StrictHostKeyChecking=no $SERVER_DEPLOY_DEV sudo docker pull $DOCKER_IMAGE_TAG

                            echo 'Run Docker'
                            ssh -o StrictHostKeyChecking=no $SERVER_DEPLOY_DEV sudo docker run -d \
                                --log-driver=fluentd \
                                --log-opt tag="OP.INTERFACE-1" \
                                --log-opt fluentd-address=192.168.135.150:24224 \
                                --name $APPLICATION_NAME_DEV -p $EXPOSE_PORT_DEV:80 $DOCKER_IMAGE_TAG

                            echo 'Check image and process Docker'
                            ssh $SERVER_DEPLOY_DEV sudo docker image prune -a -f
                            ssh $SERVER_DEPLOY_DEV sudo docker images
                            ssh $SERVER_DEPLOY_DEV sudo docker ps
                        '''
                    }
                }
            }
        }

        stage('Deploy SIT') {
            agent any
            when {
                anyOf {
                    expression { ENV_SITE == 'sit' }
                }
            }
            steps {
                sshagent(credentials : [SSH_CREDENTIAL]) {
                    echo 'Setting credential'
                    sh '''#! /bin/bash
                           ssh -o StrictHostKeyChecking=no $SERVER_DEPLOY_SIT
                           echo 'connecting'
                           ssh -v $SERVER_DEPLOY_SIT
                           echo 'Access'
                       '''
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: REGISTRY_CREDENTIAL,
                        usernameVariable: 'USERNAME',
                        passwordVariable: 'PASSWORD'
                    ]]) {
                        // SIT #1
                        sh '''#! /bin/bash
                            echo 'Login Docker'
                            ssh -o StrictHostKeyChecking=no $SERVER_DEPLOY_SIT sudo docker login -u $USERNAME -p $PASSWORD $REGISTRY_URL

                            echo 'Stop and Delete Docker'
                            ssh -o StrictHostKeyChecking=no $SERVER_DEPLOY_SIT sudo docker stop $APPLICATION_NAME_SIT
                            ssh -o StrictHostKeyChecking=no $SERVER_DEPLOY_SIT sudo docker container rm $APPLICATION_NAME_SIT

                            echo 'Pull Docker'
                            ssh -o StrictHostKeyChecking=no $SERVER_DEPLOY_SIT sudo docker pull $DOCKER_IMAGE_TAG

                            echo 'Run Docker'
                            ssh -o StrictHostKeyChecking=no $SERVER_DEPLOY_SIT sudo docker run -d \
                                --log-driver=fluentd \
                                --log-opt tag="OP.INTERFACE-SIT-1" \
                                --log-opt fluentd-address=192.168.135.150:24224 \
                                --name $APPLICATION_NAME_SIT -p $EXPOSE_PORT_SIT:80 $DOCKER_IMAGE_TAG
                        '''

                        sh '''#! /bin/bash
                            echo 'Check image and process Docker'
                            ssh $SERVER_DEPLOY_SIT sudo docker image prune -a -f
                            ssh $SERVER_DEPLOY_SIT sudo docker images
                            ssh $SERVER_DEPLOY_SIT sudo docker ps
                        '''
                    }
                }
            }
        }

             
    }
}
